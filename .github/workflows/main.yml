# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: unityci/editor:ubuntu-2019.4.27f1-windows-mono-0.15.0
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # Documentation: https://github.com/actions/checkout
      - uses: actions/checkout@v2
        with:
          # The branch, tag or SHA to checkout. When checking out the repository that
          # triggered a workflow, this defaults to the reference or SHA for that event.
          # Otherwise, uses the default branch.
          ref: 'master'
          # Personal access token (PAT) used to fetch the repository. The PAT is configured
          # with the local git config, which enables your scripts to run authenticated git
          # commands. The post-job step removes the PAT.
          #
          # We recommend using a service account with the least permissions necessary. Also
          # when generating a new PAT, select the least scopes necessary.
          #
          # [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
          #
          # Default: ${{ github.token }}
          token: ${{secrets.ACTIONS_BUILD_TOKEN}}
      
      - name: Decrypt the license file
        run: openssl rc2-64-cbc -md sha1 -d -in .github/Unity_v2019.x.ulf.enc -k ${{secrets.UNITY_LICENSE_DECRYPT_KEY}} >> .github/Unity_v2019.4.27f1.ulf

      - name: Activate Unity
        run: /opt/unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -manualLicenseFile .github/Unity_v2019.4.27f1.ulf || exit 0
       
      - name: Run Editor Tests
        run: /opt/unity/Editor/Unity -runEditorTests -batchmode -nographics -projectPath '.' -editorTestsResultFile './testResults/editorTestResults.xml'

      #- name: Run Player Tests
      #  run: /opt/unity/Editor/Unity -buildTarget Android -testPlatform Android -runTests -batchmode -nographics -projectPath '.' -testResults './testResults/testResults.xml'
      
      #- name: Send mail
      #  uses: dawidd6/action-send-mail@v3
      #  with:
      #      # Required mail server address:
      #      server_address: smtp.gmail.com
      #      # Required mail server port:
      #      server_port: 465
      #      # Optional (recommended): mail server username:
      #      username: ${{secrets.MAIL_USERNAME}}
      #      # Optional (recommended) mail server password:
      #      password: ${{secrets.MAIL_PASSWORD}}
      #      # Required mail subject:
      #      subject: RollTheBall Editor Test run results
      #      # Required recipients' addresses:
      #      to: serzhik.ivanov@gmail.com
      #      # Required sender full name (address can be skipped):
      #      from: Github Actions # <user@example.com>
      #      # Optional whether this connection use TLS (default is true if server_port is 465)
      #      secure: true
      #      # Optional plain body:
      #      body: Attached is the result of running Editor tests for ${{github.repository}} 
      #      # Optional HTML body read from file:
      #      #html_body: file://README.html
      #      # Optional carbon copy recipients:
      #      #cc: kyloren@example.com,leia@example.com
      #      # Optional blind carbon copy recipients:
      #      #bcc: r2d2@example.com,hansolo@example.com
      #      # Optional recipient of the email response:
      #      #reply_to: luke@example.com
      #      # Optional unsigned/invalid certificates allowance:
      #      ignore_cert: true
      #      # Optional converting Markdown to HTML (set content_type to text/html too):
      #      convert_markdown: true
      #      # Optional attachments:
      #      #attachments: attachments.zip,git.diff,./dist/static/*.js
      #      attachments: ./testResults/editorTestResults.xml
      #      # Optional priority: 'high', 'normal' (default) or 'low'
      #      priority: low

      - name: Build Win64
        run: /opt/unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath '.' -executeMethod BuildScript.PerformWindowsx64Build

      - name: Build Android
        run: /opt/unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath '.' -executeMethod BuildScript.PerformAndroidBuild

      - name: Build iOS
        run: /opt/unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath '.' -executeMethod BuildScript.PerformIOsBuild

      - name: Build WebGL
        run: /opt/unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath '.' -executeMethod BuildScript.PerformWebGLBuild

      - name: Upload Win x64 artefacts to Appcenter
        uses: wzieba/AppCenter-Github-Action@v1
        with:
            appName: RollTheBall Win x64
            token: ${{secrets.APPCENTER_RTB_TOKEN}}
            group: Testers
            file: ./builds/Winx64/RollTheBall_x64.exe
            notifyTesters: true
            debug: false